# % macro, PORT, The asyn port for the pmac controller
# % macro, P, PV Prefix
# % macro, R, PV Suffix
# % macro, NPOINTS, Maximum number of points in a scan
# % macro, NAXES,   Number of axes

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, pmacTrajectory.edl, P=$(P),R=$(R)


record(longin, "$(P)$(R)PROFILE_NAXES") {
  field(PINI, "YES")
  field(VAL, "$(NAXES)")
}

##
## Record to read the number of axes selected for the current
## trajectory scan
##
record(longin, "$(P)$(R)PROFILE_NUM_AXES_RBV") {
  field(DESC, "Number of axes selected")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PROFILE_NUM_AXES")
  field(SCAN, "I/O Intr")  
}

record(longout,"$(P)$(R)PROFILE_NUM_POINTS") {
    field(DESC, "# of points in profile")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_NUM_POINTS")
    field(VAL,  "$(NPOINTS)")
}

##
## Records to specify the number of motion points that define
## the trajectory scan
##
record(longin, "$(P)$(R)PROFILE_NUM_POINTS_RBV") {
  field(DESC, "Number of points defined")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PROFILE_NUM_POINTS")
  field(SCAN, "I/O Intr")  
}

##
## Record to read the current executing point of trajectory scan
##
record(longin, "$(P)$(R)PROFILE_CURRENT_POINT_RBV") {
  field(DESC, "Currently executing point")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PROFILE_CURRENT_POINT")
  field(SCAN, "I/O Intr")  
}


##
## Records to set the current time mode for the trajectory scan
## FIXED => A single value is used for each point
## ARRAY => An array of time points is supplied
##
record(bo, "$(P)$(R)PROFILE_TIME_MODE")
{
  field(DESC, "Time mode for trajectory scan")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),0)PROFILE_TIME_MODE")
  field(ZNAM, "FIXED")
  field(ONAM, "ARRAY")
  field(VAL,  "1")
  field(PINI, "YES")
}

record(bi, "$(P)$(R)PROFILE_TIME_MODE_RBV")
{
  field(DESC, "Time mode for trajectory scan")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),0)PROFILE_TIME_MODE")
  field(ZNAM, "FIXED")
  field(ONAM, "ARRAY")
  field(SCAN, "I/O Intr")  
}

##
## Records to specify the fixed time between points
##
record(ao, "$(P)$(R)PROFILE_FIXED_TIME") {
  field(DESC, "Fixed time between points")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0)PROFILE_FIXED_TIME")
  field(PINI, "NO")
}

record(ai, "$(P)$(R)PROFILE_FIXED_TIME_RBV") {
  field(DESC, "Fixed time between points")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_FIXED_TIME")
  field(SCAN, "I/O Intr")  
}

##
## Record to specify the array of times between points
##
record(waveform, "$(P)$(R)PROFILE_TIME_ARRAY")
{
    field(PINI, "NO")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_TIME_ARRAY")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NPOINTS)")
}

## Record to specify the User profile called at each point
record(waveform,"$(P)$(R)USER_ARRAY") {
    field(DESC, "User profile call at each point")
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn($(PORT),0)PMAC_PROFILE_USER")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "LONG")
    field(PREC, "3")
}

## Record to specific the Velocity mode to use at each point
record(waveform,"$(P)$(R)VEL_MODE") {
    field(DESC, "Velocity mode at each point")
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn($(PORT),0)PMAC_PROFILE_VELMODE")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "LONG")
    field(PREC, "3")
}


##
## Records to specify the acceleration
##
record(ao, "$(P)$(R)PROFILE_ACCELERATION") {
  field(DESC, "Acceleration value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0)PROFILE_FIXED_TIME")
  field(PINI, "NO")
}

record(ai, "$(P)$(R)PROFILE_ACCELERATION_RBV") {
  field(DESC, "Acceleration value")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_FIXED_TIME")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  These records control trajectory scan building (pre-execute)   # 
#                                                                 #
###################################################################

record(stringout, "$(P)$(R)PROFILE_CS_NAME") {
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn($(PORT),0)PMAC_C_TRAJ_CS_PORT")
}

record(stringin, "$(P)$(R)PROFILE_CS_NAME_RBV") {
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_CS_PORT")
  field(SCAN, "I/O Intr")  
}


###################################################################
#  These records control trajectory scan building (pre-execute)   # 
#                                                                 #
###################################################################

#record(bo, "$(P)$(R)PROFILE_BUILD") {
#  field(DTYP, "asynInt32")
#  field(OUT, "@asyn($(PORT),0)PROFILE_BUILD")
#}

record(busy,"$(P)$(R)PROFILE_BUILD") {
    field(DESC,"Build and check profile")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_BUILD")
    field(ZNAM, "Done")
    field(ONAM, "Build")
}

record(mbbi, "$(P)$(R)PROFILE_BUILD_STATE_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PROFILE_BUILD_STATE")
  field(ZRVL, "0")
  field(ZRST, "Done")
  field(ZRSV, "NO_ALARM")
  field(ONVL, "1")
  field(ONST, "Busy")
  field(ONSV, "MINOR")
  field(SCAN, "I/O Intr")
}

record(mbbi, "$(P)$(R)PROFILE_BUILD_STATUS_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PROFILE_BUILD_STATUS")
  field(ZRVL, "0")
  field(ZRST, "Undefined")
  field(ZRSV, "INVALID")
  field(ONVL, "1")
  field(ONST, "Success")
  field(ONSV, "NO_ALARM")
  field(TWVL, "2")
  field(TWST, "Failure")
  field(TWSV, "MAJOR")
  field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)PROFILE_BUILD_MESSAGE_RBV")
{
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn($(PORT),0)PROFILE_BUILD_MESSAGE")
  field(FTVL, "CHAR")
  field(NELM, "1000")
  field(SCAN, "I/O Intr")
}


###################################################################
#  These records control trajectory scan execution                # 
#                                                                 #
###################################################################

#record(bo, "$(P)$(R)PROFILE_EXECUTE") {
#  field(DTYP, "asynInt32")
#  field(OUT, "@asyn($(PORT),0)PROFILE_EXECUTE")
#}

record(busy,"$(P)$(R)PROFILE_EXECUTE") {
    field(DESC,"Execute the profile")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_EXECUTE")
    field(ZNAM, "Done")
    field(ONAM, "Execute")
}

record(mbbi, "$(P)$(R)PROFILE_EXECUTE_STATE_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PROFILE_EXECUTE_STATE")
  field(ZRVL, "0")
  field(ZRST, "Done")
  field(ZRSV, "NO_ALARM")
  field(ONVL, "1")
  field(ONST, "Move start")
  field(ONSV, "MINOR")
  field(TWVL, "2")
  field(TWST, "Executing")
  field(TWSV, "MINOR")
  field(THVL, "3")
  field(THST, "Flyback")
  field(THSV, "MINOR")
  field(SCAN, "I/O Intr")
}

record(mbbi, "$(P)$(R)PROFILE_EXECUTE_STATUS_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PROFILE_EXECUTE_STATUS")
  field(ZRVL, "0")
  field(ZRST, "Undefined")
  field(ZRSV, "INVALID")
  field(ONVL, "1")
  field(ONST, "Success")
  field(ONSV, "NO_ALARM")
  field(TWVL, "2")
  field(TWST, "Failure")
  field(TWSV, "MAJOR")
  field(THVL, "3")
  field(THST, "Abort")
  field(THSV, "MAJOR")
  field(FRVL, "4")
  field(FRST, "Timeout")
  field(FRSV, "MAJOR")
  field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)PROFILE_EXECUTE_MESSAGE_RBV")
{
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn($(PORT),0)PROFILE_EXECUTE_MESSAGE")
  field(FTVL, "CHAR")
  field(NELM, "1000")
  field(SCAN, "I/O Intr")
}

###################################################################
#  This record aborts a trajectory scan                           # 
#                                                                 #
###################################################################

record(bo, "$(P)$(R)PROFILE_ABORT") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0)PROFILE_ABORT")
}

###################################################################
#  These records are to set and read the motion program number    # 
#                                                                 #
###################################################################

record(longout, "$(P)$(R)TSCAN_PROG_NO") {
  field(DESC, "Trajectory program number")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0)PMAC_C_TRAJ_PROG")
}

record(longin, "$(P)$(R)TSCAN_PROG_NO_RBV") {
  field(DESC, "Trajectory program number")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_PROG")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  These records provide status feedback                          # 
#                                                                 #
###################################################################

record(longin, "$(P)$(R)BUFFER_A_ADDRESS_RBV") {
  field(DESC, "PMAC address of buffer A")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_ADRA")
  field(SCAN, "I/O Intr")  
}

record(longin, "$(P)$(R)BUFFER_B_ADDRESS_RBV") {
  field(DESC, "PMAC address of buffer B")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_ADRB")
  field(SCAN, "I/O Intr")  
}

record(longin, "$(P)$(R)BUFFER_LENGTH_RBV") {
  field(DESC, "Length of trajectory buffers")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_LENGTH")
  field(SCAN, "I/O Intr")  
}

record(longin, "$(P)$(R)CURRENT_INDEX_RBV") {
  field(DESC, "Current PMAC index of buffer")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_INDEX")
  field(SCAN, "I/O Intr")  
}

record(longin, "$(P)$(R)TOTAL_POINTS_RBV") {
  field(DESC, "Total points scanned")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_POINTS")
  field(SCAN, "I/O Intr")  
}

record(bi, "$(P)$(R)CURRENT_BUFFER_RBV") {
  field(DESC, "Current PMAC buffer in use")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_CBUFF")
  field(ZNAM, "A")
  field(ONAM, "B")
  field(SCAN, "I/O Intr")  
}

record(mbbi, "$(P)$(R)TRAJECTORY_STATUS_RBV") {
  field(DESC, "Current PMAC trajectory status")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_STATUS")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "Idle")
  field(ONST, "Running")
  field(TWST, "Finished")
  field(THST, "Error")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  These records report the current EPICS filled buffer ptrs      # 
#                                                                 #
###################################################################

record(longin, "$(P)$(R)EPICS_BUFFER_A_PTR_RBV") {
  field(DESC, "Current EPICS buffer A Ptr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_FILLA")
  field(SCAN, "I/O Intr")  
}

record(longin, "$(P)$(R)EPICS_BUFFER_B_PTR_RBV") {
  field(DESC, "Current EPICS buffer B Ptr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_FILLB")
  field(SCAN, "I/O Intr")  
}

record(ai, "$(P)$(R)TSCAN_TIME_RBV") {
  field(DESC, "Time of scan (s)")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_TIME")
  field(SCAN, "I/O Intr")  
}

record(longin, "$(P)$(R)TSCAN_CS_RBV") {
  field(DESC, "CS Number of current scan")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_CS")
  field(SCAN, "I/O Intr")  
}

record(ai, "$(P)$(R)TSCAN_PERCENT_RBV") {
  field(DESC, "Time of scan (s)")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_PERCENT")
  field(SCAN, "I/O Intr")  
  field(EGU, "%")  
}

record(mbbi, "$(P)$(R)TSCAN_EXT_STATUS_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0)PMAC_C_TRAJ_ESTATUS")
  field(ZRVL, "0")
  field(ZRST, "Good")
  field(ZRSV, "NO_ALARM")
  field(ONVL, "1")
  field(ONST, "Bad")
  field(ONSV, "MAJOR")
  field(SCAN, "I/O Intr")
}

###################################################################
#  Axis A Trajectory Scan Records                                 # 
#                                                                 #
###################################################################

record(bo,"$(P)$(R)A:UseAxis") {
    field(DESC, "Use axis A in scan")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_USE_AXIS_A")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# Target position array for this axis
record(waveform,"$(P)$(R)A:Positions") {
    field(DESC, "Axis A positions")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_POSITIONS_A")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "DOUBLE")
    field(PREC, "$(PREC=3)")
    field(PINI, "YES")
}

record(longout,"$(P)$(R)A:NoOfPts") {
    field(DESC, "Axis A Qty Points")
    field(SCAN, "1 second")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)A:Positions.NORD")
}

# Motor offset for this axis
record(ao,"$(P)$(R)A:Offset") {
    field(DESC, "Axis A offset")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_OFFSET_A")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)A:Offset_RBV") {
  field(DESC, "Axis A offset")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_OFFSET_A")
  field(SCAN, "I/O Intr")  
}

# Motor resolution for this axis
record(ao,"$(P)$(R)A:Resolution") {
    field(DESC, "Axis A resolution")
    field(VAL,  "1.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_RESOLUTION_A")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)A:Resolution_RBV") {
  field(DESC, "Axis A resolution")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_RESOLUTION_A")
  field(SCAN, "I/O Intr")  
}

# Default axis position
record(ao,"$(P)$(R)A:Default") {
    field(DESC, "Axis A default position")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_DEFAULT_A")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)A:Default_RBV") {
  field(DESC, "Axis A default position")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_DEFAULT_A")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  Axis B Trajectory Scan Records                                 # 
#                                                                 #
###################################################################

record(bo,"$(P)$(R)B:UseAxis") {
    field(DESC, "Use axis B in scan")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_USE_AXIS_B")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# Target position array for this axis
record(waveform,"$(P)$(R)B:Positions") {
    field(DESC, "Axis B positions")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_POSITIONS_B")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "DOUBLE")
    field(PREC, "$(PREC=3)")
    field(PINI, "YES")
}

record(longout,"$(P)$(R)B:NoOfPts") {
    field(DESC, "Axis B Qty Points")
    field(SCAN, "1 second")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)B:Positions.NORD")
}

# Motor offset for this axis
record(ao,"$(P)$(R)B:Offset") {
    field(DESC, "Axis B offset")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_OFFSET_B")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)B:Offset_RBV") {
  field(DESC, "Axis B offset")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_OFFSET_B")
  field(SCAN, "I/O Intr")  
}

# Motor resolution for this axis
record(ao,"$(P)$(R)B:Resolution") {
    field(DESC, "Axis B resolution")
    field(VAL,  "1.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_RESOLUTION_B")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)B:Resolution_RBV") {
  field(DESC, "Axis B resolution")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_RESOLUTION_B")
  field(SCAN, "I/O Intr")  
}

# Default axis position
record(ao,"$(P)$(R)B:Default") {
    field(DESC, "Axis B default position")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_DEFAULT_B")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)B:Default_RBV") {
  field(DESC, "Axis B default position")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_DEFAULT_B")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  Axis C Trajectory Scan Records                                 # 
#                                                                 #
###################################################################

record(bo,"$(P)$(R)C:UseAxis") {
    field(DESC, "Use axis C in scan")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_USE_AXIS_C")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# Target position array for this axis
record(waveform,"$(P)$(R)C:Positions") {
    field(DESC, "Axis C positions")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_POSITIONS_C")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "DOUBLE")
    field(PREC, "$(PREC=3)")
    field(PINI, "YES")
}

record(longout,"$(P)$(R)C:NoOfPts") {
    field(DESC, "Axis C Qty Points")
    field(SCAN, "1 second")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)C:Positions.NORD")
}

# Motor offset for this axis
record(ao,"$(P)$(R)C:Offset") {
    field(DESC, "Axis C offset")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_OFFSET_C")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)C:Offset_RBV") {
  field(DESC, "Axis C offset")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_OFFSET_C")
  field(SCAN, "I/O Intr")  
}

# Motor resolution for this axis
record(ao,"$(P)$(R)C:Resolution") {
    field(DESC, "Axis C resolution")
    field(VAL,  "1.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_RESOLUTION_C")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)C:Resolution_RBV") {
  field(DESC, "Axis C resolution")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_RESOLUTION_C")
  field(SCAN, "I/O Intr")  
}

# Default axis position
record(ao,"$(P)$(R)C:Default") {
    field(DESC, "Axis C default position")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_DEFAULT_C")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)C:Default_RBV") {
  field(DESC, "Axis C default position")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_DEFAULT_C")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  Axis U Trajectory Scan Records                                 # 
#                                                                 #
###################################################################

record(bo,"$(P)$(R)U:UseAxis") {
    field(DESC, "Use axis U in scan")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_USE_AXIS_U")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# Target position array for this axis
record(waveform,"$(P)$(R)U:Positions") {
    field(DESC, "Axis U positions")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_POSITIONS_U")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "DOUBLE")
    field(PREC, "$(PREC=3)")
    field(PINI, "YES")
}

record(longout,"$(P)$(R)U:NoOfPts") {
    field(DESC, "Axis U Qty Points")
    field(SCAN, "1 second")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)U:Positions.NORD")
}

# Motor offset for this axis
record(ao,"$(P)$(R)U:Offset") {
    field(DESC, "Axis U offset")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_OFFSET_U")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)U:Offset_RBV") {
  field(DESC, "Axis U offset")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_OFFSET_U")
  field(SCAN, "I/O Intr")  
}

# Motor resolution for this axis
record(ao,"$(P)$(R)U:Resolution") {
    field(DESC, "Axis U resolution")
    field(VAL,  "1.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_RESOLUTION_U")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)U:Resolution_RBV") {
  field(DESC, "Axis U resolution")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_RESOLUTION_U")
  field(SCAN, "I/O Intr")  
}

# Default axis position
record(ao,"$(P)$(R)U:Default") {
    field(DESC, "Axis U default position")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_DEFAULT_U")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)U:Default_RBV") {
  field(DESC, "Axis U default position")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_DEFAULT_U")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  Axis V Trajectory Scan Records                                 # 
#                                                                 #
###################################################################

record(bo,"$(P)$(R)V:UseAxis") {
    field(DESC, "Use axis V in scan")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_USE_AXIS_V")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# Target position array for this axis
record(waveform,"$(P)$(R)V:Positions") {
    field(DESC, "Axis V positions")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_POSITIONS_V")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "DOUBLE")
    field(PREC, "$(PREC=3)")
    field(PINI, "YES")
}

record(longout,"$(P)$(R)V:NoOfPts") {
    field(DESC, "Axis V Qty Points")
    field(SCAN, "1 second")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)V:Positions.NORD")
}

# Motor offset for this axis
record(ao,"$(P)$(R)V:Offset") {
    field(DESC, "Axis V offset")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_OFFSET_V")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)V:Offset_RBV") {
  field(DESC, "Axis V offset")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_OFFSET_V")
  field(SCAN, "I/O Intr")  
}

# Motor resolution for this axis
record(ao,"$(P)$(R)V:Resolution") {
    field(DESC, "Axis V resolution")
    field(VAL,  "1.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_RESOLUTION_V")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)V:Resolution_RBV") {
  field(DESC, "Axis V resolution")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_RESOLUTION_V")
  field(SCAN, "I/O Intr")  
}

# Default axis position
record(ao,"$(P)$(R)V:Default") {
    field(DESC, "Axis V default position")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_DEFAULT_V")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)V:Default_RBV") {
  field(DESC, "Axis V default position")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_DEFAULT_V")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  Axis W Trajectory Scan Records                                 # 
#                                                                 #
###################################################################

record(bo,"$(P)$(R)W:UseAxis") {
    field(DESC, "Use axis W in scan")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_USE_AXIS_W")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# Target position array for this axis
record(waveform,"$(P)$(R)W:Positions") {
    field(DESC, "Axis W positions")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_POSITIONS_W")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "DOUBLE")
    field(PREC, "$(PREC=3)")
    field(PINI, "YES")
}

record(longout,"$(P)$(R)W:NoOfPts") {
    field(DESC, "Axis W Qty Points")
    field(SCAN, "1 second")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)W:Positions.NORD")
}

# Motor offset for this axis
record(ao,"$(P)$(R)W:Offset") {
    field(DESC, "Axis W offset")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_OFFSET_W")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)W:Offset_RBV") {
  field(DESC, "Axis W offset")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_OFFSET_W")
  field(SCAN, "I/O Intr")  
}

# Motor resolution for this axis
record(ao,"$(P)$(R)W:Resolution") {
    field(DESC, "Axis W resolution")
    field(VAL,  "1.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_RESOLUTION_W")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)W:Resolution_RBV") {
  field(DESC, "Axis W resolution")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_RESOLUTION_W")
  field(SCAN, "I/O Intr")  
}

# Default axis position
record(ao,"$(P)$(R)W:Default") {
    field(DESC, "Axis W default position")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_DEFAULT_W")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)W:Default_RBV") {
  field(DESC, "Axis W default position")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_DEFAULT_W")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  Axis X Trajectory Scan Records                                 # 
#                                                                 #
###################################################################

record(bo,"$(P)$(R)X:UseAxis") {
    field(DESC, "Use axis X in scan")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_USE_AXIS_X")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# Target position array for this axis
record(waveform,"$(P)$(R)X:Positions") {
    field(DESC, "Axis X positions")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_POSITIONS_X")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "DOUBLE")
    field(PREC, "$(PREC=3)")
    field(PINI, "YES")
}

record(longout,"$(P)$(R)X:NoOfPts") {
    field(DESC, "Axis X Qty Points")
    field(SCAN, "1 second")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)X:Positions.NORD")
}

# Motor offset for this axis
record(ao,"$(P)$(R)X:Offset") {
    field(DESC, "Axis X offset")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_OFFSET_X")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)X:Offset_RBV") {
  field(DESC, "Axis X offset")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_OFFSET_X")
  field(SCAN, "I/O Intr")  
}

# Motor resolution for this axis
record(ao,"$(P)$(R)X:Resolution") {
    field(DESC, "Axis X resolution")
    field(VAL,  "1.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_RESOLUTION_X")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)X:Resolution_RBV") {
  field(DESC, "Axis X resolution")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_RESOLUTION_X")
  field(SCAN, "I/O Intr")  
}

# Default axis position
record(ao,"$(P)$(R)X:Default") {
    field(DESC, "Axis X default position")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_DEFAULT_X")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)X:Default_RBV") {
  field(DESC, "Axis X default position")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_DEFAULT_X")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  Axis Y Trajectory Scan Records                                 # 
#                                                                 #
###################################################################

record(bo,"$(P)$(R)Y:UseAxis") {
    field(DESC, "Use axis Y in scan")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_USE_AXIS_Y")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# Target position array for this axis
record(waveform,"$(P)$(R)Y:Positions") {
    field(DESC, "Axis Y positions")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_POSITIONS_Y")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "DOUBLE")
    field(PREC, "$(PREC=3)")
    field(PINI, "YES")
}

record(longout,"$(P)$(R)Y:NoOfPts") {
    field(DESC, "Axis Y Qty Points")
    field(SCAN, "1 second")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)Y:Positions.NORD")
}

# Motor offset for this axis
record(ao,"$(P)$(R)Y:Offset") {
    field(DESC, "Axis Y offset")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_OFFSET_Y")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)Y:Offset_RBV") {
  field(DESC, "Axis Y offset")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_OFFSET_Y")
  field(SCAN, "I/O Intr")  
}

# Motor resolution for this axis
record(ao,"$(P)$(R)Y:Resolution") {
    field(DESC, "Axis Y resolution")
    field(VAL,  "1.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_RESOLUTION_Y")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)Y:Resolution_RBV") {
  field(DESC, "Axis Y resolution")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_RESOLUTION_Y")
  field(SCAN, "I/O Intr")  
}

# Default axis position
record(ao,"$(P)$(R)Y:Default") {
    field(DESC, "Axis Y default position")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_DEFAULT_Y")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)Y:Default_RBV") {
  field(DESC, "Axis Y default position")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_DEFAULT_Y")
  field(SCAN, "I/O Intr")  
}

###################################################################
#  Axis Z Trajectory Scan Records                                 # 
#                                                                 #
###################################################################

record(bo,"$(P)$(R)Z:UseAxis") {
    field(DESC, "Use axis Z in scan")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0)PROFILE_USE_AXIS_Z")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

# Target position array for this axis
record(waveform,"$(P)$(R)Z:Positions") {
    field(DESC, "Axis Z positions")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0)PROFILE_POSITIONS_Z")
    field(NELM, "$(NPOINTS)")
    field(FTVL, "DOUBLE")
    field(PREC, "$(PREC=3)")
    field(PINI, "YES")
}

record(longout,"$(P)$(R)Z:NoOfPts") {
    field(DESC, "Axis Z Qty Points")
    field(SCAN, "1 second")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)Z:Positions.NORD")
}

# Motor offset for this axis
record(ao,"$(P)$(R)Z:Offset") {
    field(DESC, "Axis Z offset")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_OFFSET_Z")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)Z:Offset_RBV") {
  field(DESC, "Axis Z offset")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_OFFSET_Z")
  field(SCAN, "I/O Intr")  
}

# Motor resolution for this axis
record(ao,"$(P)$(R)Z:Resolution") {
    field(DESC, "Axis Z resolution")
    field(VAL,  "1.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_RESOLUTION_Z")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)Z:Resolution_RBV") {
  field(DESC, "Axis Z resolution")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_RESOLUTION_Z")
  field(SCAN, "I/O Intr")  
}

# Default axis position
record(ao,"$(P)$(R)Z:Default") {
    field(DESC, "Axis Z default position")
    field(VAL,  "0.0")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0)PROFILE_DEFAULT_Z")
    field(PREC, "$(PREC=3)")
}

record(ai, "$(P)$(R)Z:Default_RBV") {
  field(DESC, "Axis Z default position")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0)PROFILE_DEFAULT_Z")
  field(SCAN, "I/O Intr")  
}
