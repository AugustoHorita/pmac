##############################################################
#
# Records to read asynPortDriver parameters from the param
# library for the class pmacCsController.
#
# The Asyn address is set as zero because that's what we use 
# for controller parameters.
# 
##############################################################

# % macro, PORT, The asyn port for the pmac controller
# % macro, P, PV Prefix - NOTE: For standard naming this should be the Geobrick Controller P
# % macro, R, PV Suffix
# % macro, CS, Coordinate System Number
# % macro, TIMEOUT, Timeout for controller communication
# % macro, CONTROLLER_P, The P prefix for the controller

#
# This associates an edm screen with the template
# % gui, $(PORT), edm, pmacCoord.edl, P=$(P),R=$(R),name=$(PORT)
#


##############################################################
# Control deferred mode for all axes in this CS
##############################################################
record(bo, "$(P)$(R)DeferMoves")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT=4))MOTOR_DEFER_MOVES")
    field(VAL, "0")
    field(ZNAM, "Defer Off")
    field(ONAM, "Defer On")
}


##############################################################
# Control the time of programmed moves
# 0 = fast as possible
# -1 = controlled by CS default feedrate isx89
# >0 = take at least this many milli-secs to move
##############################################################
# % autosave 2
record(ao, "$(P)$(R)CsMoveTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT=4))PMAC_C_CS_MOVE_TIME")
    field(VAL, "-1")
}

record(ai, "$(P)$(R)CsMoveTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT=4))PMAC_C_CS_MOVE_TIME")
    field(SCAN, "I/O Intr")
}


##############################################################
# Immediate demands for each CS motor
##############################################################
substitute "P=$(CONTROLLER_P):CS$(CS), M=$(R)A, ADDR=1, DESC=CS Motor A"
include "pmacDirectMotor.template"
substitute "P=$(CONTROLLER_P):CS$(CS), M=$(R)B, ADDR=2, DESC=CS Motor B"
include "pmacDirectMotor.template"
substitute "P=$(CONTROLLER_P):CS$(CS), M=$(R)C, ADDR=3, DESC=CS Motor C"
include "pmacDirectMotor.template"
substitute "P=$(CONTROLLER_P):CS$(CS), M=$(R)U, ADDR=4, DESC=CS Motor U"
include "pmacDirectMotor.template"
substitute "P=$(CONTROLLER_P):CS$(CS), M=$(R)V, ADDR=5, DESC=CS Motor V"
include "pmacDirectMotor.template"
substitute "P=$(CONTROLLER_P):CS$(CS), M=$(R)W, ADDR=6, DESC=CS Motor W"
include "pmacDirectMotor.template"
substitute "P=$(CONTROLLER_P):CS$(CS), M=$(R)X, ADDR=7, DESC=CS Motor X"
include "pmacDirectMotor.template"
substitute "P=$(CONTROLLER_P):CS$(CS), M=$(R)Y, ADDR=8, DESC=CS Motor Y"
include "pmacDirectMotor.template"
substitute "P=$(CONTROLLER_P):CS$(CS), M=$(R)Z, ADDR=9, DESC=CS Motor Z"
include "pmacDirectMotor.template"
