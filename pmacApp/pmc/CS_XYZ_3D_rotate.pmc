CLOSE

;##########################################################################
;
; This coordinate system performs a 3 dimensional cartesian rotation betwean
; 3 real X,Y,Z motors and 3 virtual X,Y,Z motors. The 3 rotation angles 
; (i.e. Omega(Rx), Phi(Ry), Kappa(Rz)) can be either read from a motor or written 
; down to the pmac as a coordinate system Q variable.
; The template is intended for use in centreing a sample on an X,Y,Z stage.
; 
; Original Author: Pete Leicester
;
; Defined axes:
;	X (Addr 6) = X Position in mm
;	Y (Addr 7) = Y Position in mm
;	Z (Addr 8) = Z Position in mm
;
; Macros (and example values):
;	COORD = $(COORD)          CS number (only works for CS 1..9), e.g. 2
;	PLC = $(PLC)              PLC number, should be CS number+15, e.g. 17
;	SAMPLE_X     = $(M_X)     Axis Number for Sample Centering X, e.g. 1
;	SAMPLE_Y     = $(M_Y)     Axis Number for Sample Centering Y, e.g. 2
;	SAMPLE_Z     = $(M_Z)     Axis Number for Sample Centering Z, e.g. 3
;	SAMPLE_OMEGA = $(M_OMEGA) Axis Number for Sample Omega (rotation about X), define as 0 if no omega motor and set CONST_OPOS instead
;	SAMPLE_PHI   = $(M_PHI)   Axis Number for Sample Phi   (rotation about Y), define as 0 if no phi motor and set CONST_PPOS instead
;	SAMPLE_KAPPA = $(M_KAPPA) Axis Number for Sample Kappa (rotation about Z), define as 0 if no kappa motor and set CONST_KPOS instead
; The following definitions allows a virtual motor to be locked in position e.g. you may want to lock virtual Z to zero when 2D scanning in X and Y.
; Leave the following undefined if you dont want to lock the axis.
;   FIXED_X_DEMAND = $(VIRTUAL_X_DEMAND=Q87) Optional. Can be used to fix the X virtual motor position (usually to zero).
;   FIXED_Y_DEMAND = $(VIRTUAL_Y_DEMAND=Q88) Optional. Can be used to fix the Y virtual motor position (usually to zero).
;   FIXED_Z_DEMAND = $(VIRTUAL_Z_DEMAND=Q89) Optional. Can be used to fix the Z virtual motor position (usually to zero).
;	
; NB Matrix transform taken from /dls_sw/.../R3.14.12.3/support/motomanNX100Motor/motomanNX100MotorApp/src/CartesianRotate.cpp
;
;Rotation matrix about X
; Mx=  {1.0, 0.0,        0.0        }
;      {0.0, cos(omega), -sin(omega)}
;      {0.0, sin(omega), cos(omega)}}
;     
;Rotation matrix about Y
; My=  {cos(phi),  0.0, sin(phi)}
;      {0.0,       1.0, 0.0     }
;      {-sin(phi), 0.0, cos(phi)}
;
;Rotation matrix about Z
; Mz=  {cos(kappa), -sin(kappa), 0.0}
;      {sin(kappa), cos(kappa),  0.0}
;      {0.0,        0.0,         1.0}
;
;Rotation matrix about all three axis = Mz * My * Mx
;Mzyx = { cos(kappa)*cos(phi), cos(kappa)*sin(phi)*sin(omega) - sin(kappa)*cos(omega), cos(kappa)*sin(phi)*cos(omega) + sin(kappa)*sin(omega) }
;       { sin(kappa)*cos(phi), sin(kappa)*sin(phi)*sin(omega) + cos(kappa)*cos(omega), sin(kappa)*sin(phi)*cos(omega) - cos(kappa)*sin(omega) }
;       { -sin(phi),           cos(phi)*sin(omega),                                    cos(phi)*cos(omega)
;
;###################################################################

; Set trig calculations to be performed in degrees
i15 = 0

; Change to CS$(COORD)
&$(COORD)

; Set relevant axes to use kinematics
#$(M_X)->I
#$(M_Y)->I
#$(M_Z)->I

; Define real motor resolution, offset, and move flag variables
; These are set by motor_in_cs.template (from spreadsheet)
#define XMOVE P(4700+$(M_X))
#define XMRES P(4800+$(M_X))
#define XOFF  P(4900+$(M_X))
#define YMOVE P(4700+$(M_Y))
#define YMRES P(4800+$(M_Y))
#define YOFF  P(4900+$(M_Y))
#define ZMOVE P(4700+$(M_Z))
#define ZMRES P(4800+$(M_Z))
#define ZOFF  P(4900+$(M_Z))

; The following angle motors are optional.
; If angle motor not available then epics must set CONST_OPOS and/or CONST_PPOS and/or CONST_KPOS
#define OMOVE P(4700+$(M_OMEGA))
#define OMRES P(4800+$(M_OMEGA))
#define OOFF  P(4900+$(M_OMEGA))
#define PMOVE P(4700+$(M_PHI))
#define PMRES P(4800+$(M_PHI))
#define POFF  P(4900+$(M_PHI))
#define KMOVE P(4700+$(M_KAPPA))
#define KMRES P(4800+$(M_KAPPA))
#define KOFF  P(4900+$(M_KAPPA))

; These are the rotation motors in steps
#define SAMPLE_OMEGA	((m$(M_OMEGA)62+m$(M_OMEGA)69) / (I$(M_OMEGA)08*32)) 
#define SAMPLE_PHI	    ((m$(M_PHI)62+m$(M_PHI)69) / (I$(M_PHI)08*32))       
#define SAMPLE_KAPPA	((m$(M_KAPPA)62+m$(M_KAPPA)69) / (I$(M_KAPPA)08*32)) 


; Kinematic Positions 
; These are the virtual motor positions in egus calculated by the forward kinomatic
#define VIRTUAL_X	Q7	; Virtual X in egus
#define VIRTUAL_Y	Q8	; Virtual Y in egus
#define VIRTUAL_Z	Q9	; Virtual Z in egus
; These are the real motor positions in steps calculated by the inverse kinomatic
#define SAMPLE_X	P$(M_X)  ; Real X in steps  
#define SAMPLE_Y	P$(M_Y)  ; Real Y in steps  
#define SAMPLE_Z	P$(M_Z)  ; Real Z in steps 


; Q20-70 EPICS Variables
; If there is no angle motor then epics needs to write down the Omega, Phi amd Kappa angles 
; These wariable can be used to define the angle constant
#define CONST_OPOS Q20
#define CONST_PPOS Q21
#define CONST_KPOS Q22
CONST_OPOS=0
CONST_PPOS=0
CONST_KPOS=0


;
; Forward Kinematics - Calculate Virtual X,Y,Z position from real x,y,z motor positions and angles
;

; Q128-199 Forward Kinematic Temporary Variables
#define XPOS Q128
#define YPOS Q129
#define ZPOS Q130
#define OPOS Q131
#define PPOS Q132
#define KPOS Q133

OPEN FORWARD
CLEAR
    ; get Omega, Phi Kappa angles from motor (if defined) or constant in egus
    ; Note we use the same rotation calc as the inverse kinematic but we negate the angles
    if ($(M_OMEGA=0) > 0)
        OPOS = ((OMRES*SAMPLE_OMEGA)+OOFF)
    else
        OPOS = CONST_OPOS
    endif    
    if ($(M_PHI=0) > 0)
        PPOS = ((PMRES*SAMPLE_PHI)+POFF)
    else
        PPOS = CONST_PPOS
    endif    
    if ($(M_KAPPA=0) > 0)
        KPOS = ((KMRES*SAMPLE_KAPPA)+KOFF)
    else
        KPOS = CONST_KPOS
    endif    

    ; calc real motor x,y,z in egu's
    XPOS = ((XMRES*SAMPLE_X)+XOFF)
    YPOS = ((YMRES*SAMPLE_Y)+YOFF)
    ZPOS = ((ZMRES*SAMPLE_Z)+ZOFF)

    ; calc virtual motor x,y,z in egus
    ; here we are applying the rotation matrix
    VIRTUAL_X = (XPOS * cos(KPOS)*cos(PPOS)) + (YPOS * ((cos(KPOS)*sin(PPOS)*sin(OPOS)) - (sin(KPOS)*cos(OPOS)))) + (ZPOS * ((cos(KPOS)*sin(PPOS)*cos(OPOS)) + (sin(KPOS)*sin(OPOS))))
    VIRTUAL_Y = (XPOS * sin(KPOS)*cos(PPOS)) + (YPOS * ((sin(KPOS)*sin(PPOS)*sin(OPOS)) + (cos(KPOS)*cos(OPOS)))) + (ZPOS * ((sin(KPOS)*sin(PPOS)*cos(OPOS)) - (cos(KPOS)*sin(OPOS))))
    VIRTUAL_Z = (XPOS * (-sin(PPOS))) + (YPOS * cos(PPOS)*sin(OPOS)) + (ZPOS * cos(PPOS)*cos(OPOS))
CLOSE


;
; Invserse Kinematics - Calculate real x,y,z motor position from virtual x,y,z motor positions and angles
;
; Q228-299 Inverse Kinematic Temporary Variables
#define XPOS Q228
#define YPOS Q229
#define ZPOS Q230
#define OPOS Q231
#define PPOS Q232
#define KPOS Q233

OPEN INVERSE
CLEAR
    ; get Omega, Phi Kappa angles from motor (if defined) or constant in egus
    if ($(M_OMEGA=0) > 0)
        OPOS = -((OMRES*SAMPLE_OMEGA)+OOFF)
    else
        OPOS = -CONST_OPOS
    endif    
    if ($(M_PHI=0) > 0)
        PPOS = -((PMRES*SAMPLE_PHI)+POFF)
    else
        PPOS = -CONST_PPOS
    endif    
    if ($(M_KAPPA=0) > 0)
        KPOS = -((KMRES*SAMPLE_KAPPA)+KOFF)
    else
        KPOS = -CONST_KPOS
    endif    

    ; calc real motor x,y,z in egus
    ; here we are applying the rotation matrix
    XPOS = (VIRTUAL_X * cos(KPOS)*cos(PPOS)) + (VIRTUAL_Y * ((cos(KPOS)*sin(PPOS)*sin(OPOS)) - (sin(KPOS)*cos(OPOS)))) + (VIRTUAL_Z * ((cos(KPOS)*sin(PPOS)*cos(OPOS)) + (sin(KPOS)*sin(OPOS))))
    YPOS = (VIRTUAL_X * sin(KPOS)*cos(PPOS)) + (VIRTUAL_Y * ((sin(KPOS)*sin(PPOS)*sin(OPOS)) + (cos(KPOS)*cos(OPOS)))) + (VIRTUAL_Z * ((sin(KPOS)*sin(PPOS)*cos(OPOS)) - (cos(KPOS)*sin(OPOS))))
    ZPOS = (VIRTUAL_X * (-sin(PPOS))) + (VIRTUAL_Y * cos(PPOS)*sin(OPOS)) + (VIRTUAL_Z * cos(PPOS)*cos(OPOS))
    
    ; Sample X,Y and Z calculated in steps
    SAMPLE_X = ((XPOS - XOFF) / XMRES)
    SAMPLE_Y = ((YPOS - YOFF) / YMRES)
    SAMPLE_Z = ((ZPOS - ZOFF) / ZMRES)
CLOSE

;*****************************
; A PLC for position reporting
; as Forward Kinematics - Calculate Virtual X,Y,Z position from real x,y,z motor positions and angles
;
; These are the virtual motor positions in egus calculated by the PLC
#define VIRTUAL_X	Q87	; Virtual X position in egus
#define VIRTUAL_Y	Q88	; Virtual Y position in egus
#define VIRTUAL_Z	Q89	; Virtual Z position in egus

; These are the real x,y,z motors in steps
#define SAMPLE_X	((m$(M_X)62+m$(M_X)69)/(I$(M_X)08*32))
#define SAMPLE_Y	((m$(M_Y)62+m$(M_Y)69)/(I$(M_Y)08*32))
#define SAMPLE_Z	((m$(M_Z)62+m$(M_Z)69)/(I$(M_Z)08*32))

; Q328-399 PLC Temporary Variables
#define XPOS Q328
#define YPOS Q329
#define ZPOS Q330
#define OPOS Q331
#define PPOS Q332
#define KPOS Q333
; Variables to remember last angles used in PLC calc
#define LAST_OPOS Q334
#define LAST_PPOS Q335
#define LAST_KPOS Q336
LAST_OPOS=0
LAST_PPOS=0
LAST_KPOS=0

OPEN PLC $(PLC)
CLEAR
    ADDRESS&$(COORD)
    ; get Omega, Phi Kappa angles from motor (if defined) or constant in egus
    ; Note we use the same rotation calc as the inverse kinematic but we negate the angles
    if ($(M_OMEGA=0) > 0)
        OPOS = ((OMRES*SAMPLE_OMEGA)+OOFF)
    else
        OPOS = CONST_OPOS
    endif    
    if ($(M_PHI=0) > 0)
        PPOS = ((PMRES*SAMPLE_PHI)+POFF)
    else
        PPOS = CONST_PPOS
    endif    
    if ($(M_KAPPA=0) > 0)
        KPOS = ((KMRES*SAMPLE_KAPPA)+KOFF)
    else
        KPOS = CONST_KPOS
    endif    

    ; calc real motor x,y,z in egu's
    XPOS = ((XMRES*SAMPLE_X)+XOFF)
    YPOS = ((YMRES*SAMPLE_Y)+YOFF)
    ZPOS = ((ZMRES*SAMPLE_Z)+ZOFF)
    
    ; calc virtual motor x,y,z in egus
    ; here we are applying the rotation matrix
    VIRTUAL_X = (XPOS * cos(KPOS)*cos(PPOS)) + (YPOS * ((cos(KPOS)*sin(PPOS)*sin(OPOS)) - (sin(KPOS)*cos(OPOS)))) + (ZPOS * ((cos(KPOS)*sin(PPOS)*cos(OPOS)) + (sin(KPOS)*sin(OPOS))))
    VIRTUAL_Y = (XPOS * sin(KPOS)*cos(PPOS)) + (YPOS * ((sin(KPOS)*sin(PPOS)*sin(OPOS)) + (cos(KPOS)*cos(OPOS)))) + (ZPOS * ((sin(KPOS)*sin(PPOS)*cos(OPOS)) - (cos(KPOS)*sin(OPOS))))
    VIRTUAL_Z = (XPOS * (-sin(PPOS))) + (YPOS * cos(PPOS)*sin(OPOS)) + (ZPOS * cos(PPOS)*cos(OPOS))

    ; If real X,Z or Y motor records did the last move, set demands = readbacks
    if (XMOVE = 1)
    or (YMOVE = 1)
    or (ZMOVE = 1)
        ZMOVE = 0
        YMOVE = 0
        XMOVE = 0
        Q77 = $(VIRTUAL_X_DEMAND=Q87)
        Q78 = $(VIRTUAL_Y_DEMAND=Q88)
        Q79 = $(VIRTUAL_Z_DEMAND=Q89)
    endif
    ; if an angle has changed then set demands = readback to prevent undesired moves
    if (OPOS!=LAST_OPOS)
    or (PPOS!=LAST_PPOS)
    or (KPOS!=LAST_KPOS)
        Q77 = $(VIRTUAL_X_DEMAND=Q87)
        Q78 = $(VIRTUAL_Y_DEMAND=Q88)
        Q79 = $(VIRTUAL_Z_DEMAND=Q89)
        LAST_OPOS=OPOS
        LAST_PPOS=PPOS
        LAST_KPOS=KPOS
    endif    
CLOSE

ENABLE PLC $(PLC)

