CLOSE

;##########################################################################
;
; Define Motion for Virtual Y and Z with Sample Centering Stages and Omega
;
; Original Author: James O'Hea
;
; Defined axes:
;	Y (Addr 6) = Y Position in mm
;	Z (Addr 7) = Z Position in mm
;
; Macros (and example values):
;	COORD = $(COORD)        CS number (only works for CS 1..9), e.g. 2
;	PLC = $(PLC)            PLC number, should be CS number+15, e.g. 17
;	SAMPLE_Z = $(SAMPLE_Z)	Axis Number for Sample Centering Z, e.g. 1
;	SAMPLE_Y = $(SAMPLE_Y)	Axis Number for Sample Centering Y, e.g. 2
;	OMEGA = $(OMEGA)        Axis Number for Omega, e.g. 3
;   VIRTUAL_Z_DEMAND_RESET = $(VIRTUAL_Z_DEMAND_RESET)  The value to set Q78 after
;                           completing a direct motor move. Default to 0. For normal
;                           C.S behaviour, set to Q88.
;	
;###################################################################

; Set trig calculations to be performed in degrees
i15 = 0

; Change to CS$(COORD)
&$(COORD)

; Set relevant axes to use kinematics
&$(COORD)#$(SAMPLE_Z)->I
&$(COORD)#$(SAMPLE_Y)->I

; Define resolution, offset, and move flag variables
; These are set by motor_in_cs.template (from spreadsheet)
#define ZMOVE P(4700+$(SAMPLE_Z))
#define ZMRES P(4800+$(SAMPLE_Z))
#define ZOFF  P(4900+$(SAMPLE_Z))
#define YMOVE P(4700+$(SAMPLE_Y))
#define YMRES P(4800+$(SAMPLE_Y))
#define YOFF  P(4900+$(SAMPLE_Y))
#define OMOVE P(4700+$(OMEGA))
#define OMRES P(4800+$(OMEGA))
#define OOFF  P(4900+$(OMEGA))

; Q1-9 Kinematic Positions (Temporary variables used in kinematic calculations by PMAC)

#define VIRTUAL_Y	Q7	; Desired Virtual Y
#define VIRTUAL_Z	Q8	; Desired Virtual Z

; Q128-199 Forward Kinematic Temporary Variables

; None needed

; Q228-299 Inverse Kinematic Temporary Variables

; None needed

; Q20-70 EPICS Variables

; None needed

#define SAMPLE_Z	P$(SAMPLE_Z)                            ; Sample Z Calculation
#define SAMPLE_Y	P$(SAMPLE_Y)                            ; Sample Y Calculation
#define OMEGA		((m$(OMEGA)62+m$(OMEGA)69) / (I$(OMEGA)08*32)) ; Omega Calculation

; Forward Kinematics - Calculate Virtual Y position from Sample Z, Y, and Omega
#define ZPOS (ZMRES*SAMPLE_Z+ZOFF)
#define YPOS (YMRES*SAMPLE_Y+YOFF)
#define OPOS (OMRES*OMEGA+OOFF)

OPEN FORWARD
CLEAR
	VIRTUAL_Y = (ZPOS * (sin(OPOS))) + (YPOS * (cos(OPOS)))
	VIRTUAL_Z = (ZPOS * (cos(OPOS))) - (YPOS * (sin(OPOS)))
CLOSE

; Inverse Kinematics - Calculate Sample Z and Y from Virtual Y and Omega
#define ZPOS		Q232
#define YPOS		Q233

OPEN INVERSE
CLEAR
	; Sample Z and Y calculated in mm
	ZPOS = (VIRTUAL_Z * (cos(OPOS))) + (VIRTUAL_Y * (sin(OPOS)))
	YPOS = (VIRTUAL_Y * (cos(OPOS))) - (VIRTUAL_Z * (sin(OPOS)))

	; Sample Z and Y calculated in motor counts
	P$(SAMPLE_Z) = ((ZPOS - ZOFF) / ZMRES)
	P$(SAMPLE_Y) = ((YPOS - YOFF) / YMRES)
CLOSE

; A PLC for position reporting
#define VIRTUAL_Y	Q87	; Desired Virtual Y position
#define VIRTUAL_Z	Q88	; Desired Virtual Z position
#define ZPOS		(ZMRES*((m$(SAMPLE_Z)62+m$(SAMPLE_Z)69)/(I$(SAMPLE_Z)08*32))+ZOFF)
#define YPOS		(YMRES*((m$(SAMPLE_Y)62+m$(SAMPLE_Y)69)/(I$(SAMPLE_Y)08*32))+YOFF)

OPEN PLC $(PLC)
CLEAR
    ADDRESS&$(COORD)

    VIRTUAL_Y = (ZPOS * (sin(OPOS))) + (YPOS * (cos(OPOS)))
    VIRTUAL_Z = (ZPOS * (cos(OPOS))) - (YPOS * (sin(OPOS)))

    ; If Sample Z or Y motor records did the last move, set demands = readbacks
    if (ZMOVE = 1)
    or (YMOVE = 1)
        ZMOVE = 0
        YMOVE = 0
        Q77 = Q87
        ; If virtual Z is not used by the user (the default) then it can
        ; be set to 0 after moves. Regular C.S behaviour sets Q78=Q88.
        Q78 = $(VIRTUAL_Z_DEMAND_RESET=0)
    endif
CLOSE

ENABLE PLC $(PLC)

