CLOSE

;################################################
;; \file
;; Define motion for I22's multiple beamstops on a platform
;;
;; Original Author: Tom Cobb
;;
;; Defined axes (TSAXS):
;; - A (addr 0) = BS1 CSX
;; - B (addr 1) = BS2 CSX
;; - C (addr 2) = BS3 CSX
;; - U (addr 3) = BS2 X ABS
;; - V (addr 4) = BS1 CSY
;; - W (addr 5) = BS2 CSY
;; - X (addr 6) = BS3 CSY
;; - Y (addr 7) = BS2 Y ABS
;;
;; Defined axes (GISAXS):
;; - A (addr 0) = BS1 CSX
;; - B (addr 1) = BS2 PITCH
;; - C (addr 2) = BS3 PITCH
;; - U (addr 3) = BS1 X ABS
;; - V (addr 4) = BS1 CSY
;; - W (addr 5) = BS2 YAW
;; - X (addr 6) = BS3 YAW
;; - Y (addr 7) = BS1 Y ABS
;;
;; Macros
;; - COORD = $(COORD)  CS number, e.g. 2
;; - PLC = $(PLC)  PLC number, should be CS number+15, e.g. 17
;; - BS1_X = $(BS1_X)  Axisnum for Beamstop 1 X Motor, e.g. 1
;; - BS2_X = $(BS2_X)  Axisnum for Beamstop 2 X Motor, e.g. 2
;; - BS3_X = $(BS3_X)  Axisnum for Beamstop 3 X Motor, e.g. 3
;; - SP_X = $(SP_X)  Axisnum for SAYS Platform X Motor, e.g. 4
;; - BS1_Y = $(BS1_Y)  Axisnum for Beamstop 1 Y Motor, e.g. 5
;; - BS2_Y = $(BS2_Y)  Axisnum for Beamstop 2 Y Motor, e.g. 6
;; - BS3_Y = $(BS3_Y)  Axisnum for Beamstop 3 Y Motor, e.g. 7
;; - SP_Y = $(SP_Y)  Axisnum for SAYS Platform Y Motor, e.g. 8

;; - BS1_Z = $(BS1_Z)  Z offset of beamstop 1 from platform reference
;; - BS2_Z = $(BS2_Z)  Z offset of beamstop 2 from platform reference
;; - BS3_Z = $(BS3_Z)  Z offset of beamstop 3 from platform reference
;; - B_PITCH = $(B_PITCH)  Beam pitch in relation to nominal floor
;; - B_YAW = $(B_YAW)  Beam yaw in relation to nominal floor
;; - CAMERA = $(CAMERA)  Camera to Sample Distance
;; - ZGAP = $(ZGAP)  Z Gap between Chamber and Detector

;################################################

; Change to CS$(COORD)
&$(COORD)

; Set relevant axes to use kinematics
#$(BS1_X)->I
#$(BS2_X)->I
#$(BS3_X)->I
#$(SP_X)->I
#$(BS1_Y)->I
#$(BS2_Y)->I
#$(BS3_Y)->I
#$(SP_Y)->I


; Store inputs
#define BS1_Z Q21
BS1_Z = $(BS1_Z)
#define BS2_Z Q22
BS2_Z = $(BS2_Z)
#define BS3_Z Q23
BS3_Z = $(BS3_Z)
#define B_PITCH Q25
B_PITCH = $(B_PITCH)
#define B_YAW Q26
B_YAW = $(B_YAW)
#define MODE Q27
#define TSAXS 0
#define GISAXS 1
MODE = GISAXS
#define CAMERA Q28
CAMERA = $(CAMERA)
#define ZGAP Q29
ZGAP = $(ZGAP)

; These are set by motor_in_cs.template
#define BS1_X_MOVE      P(4700+$(BS1_X))
#define BS1_X_MRES      P(4800+$(BS1_X))
#define BS1_X_OFF       P(4900+$(BS1_X))
#define BS2_X_MOVE      P(4700+$(BS2_X))
#define BS2_X_MRES      P(4800+$(BS2_X))
#define BS2_X_OFF       P(4900+$(BS2_X))
#define BS3_X_MOVE      P(4700+$(BS3_X))
#define BS3_X_MRES      P(4800+$(BS3_X))
#define BS3_X_OFF       P(4900+$(BS3_X))
#define SP_X_MOVE       P(4700+$(SP_X))
#define SP_X_MRES       P(4800+$(SP_X))
#define SP_X_OFF        P(4900+$(SP_X))
#define BS1_Y_MOVE      P(4700+$(BS1_Y))
#define BS1_Y_MRES      P(4800+$(BS1_Y))
#define BS1_Y_OFF       P(4900+$(BS1_Y))
#define BS2_Y_MOVE      P(4700+$(BS2_Y))
#define BS2_Y_MRES      P(4800+$(BS2_Y))
#define BS2_Y_OFF       P(4900+$(BS2_Y))
#define BS3_Y_MOVE      P(4700+$(BS3_Y))
#define BS3_Y_MRES      P(4800+$(BS3_Y))
#define BS3_Y_OFF       P(4900+$(BS3_Y))
#define SP_Y_MOVE       P(4700+$(SP_Y))
#define SP_Y_MRES       P(4800+$(SP_Y))
#define SP_Y_OFF        P(4900+$(SP_Y))

; Calculate compound axes from real motors
#define BS1_X_POS       (BS1_X_MRES*P$(BS1_X)+BS1_X_OFF)
#define BS2_X_POS       (BS2_X_MRES*P$(BS2_X)+BS2_X_OFF)
#define BS3_X_POS       (BS3_X_MRES*P$(BS3_X)+BS3_X_OFF)
#define SP_X_POS        (SP_X_MRES* P$(SP_X)+ SP_X_OFF)
#define BS1_Y_POS       (BS1_Y_MRES*P$(BS1_Y)+BS1_Y_OFF)
#define BS2_Y_POS       (BS2_Y_MRES*P$(BS2_Y)+BS2_Y_OFF)
#define BS3_Y_POS       (BS3_Y_MRES*P$(BS3_Y)+BS3_Y_OFF)
#define SP_Y_POS        (SP_Y_MRES* P$(SP_Y)+ SP_Y_OFF)

; TSAXS
#define BS1_CSX         Q1
#define BS2_CSX         Q2
#define BS3_CSX         Q3
#define BS2_X_ABS       Q4
#define BS1_CSY         Q5
#define BS2_CSY         Q6
#define BS3_CSY         Q7
#define BS2_Y_ABS       Q8
#define BS3_CSR         Q9
; GISAXS
#define BS1_CSX         Q1
#define BS2_PITCH       Q2
#define BS3_PITCH       Q3
#define BS1_X_ABS       Q4
#define BS1_CSY         Q5
#define BS2_YAW         Q6
#define BS3_YAW         Q7
#define BS1_Y_ABS       Q8
#define BS3_CSR         Q9

OPEN FORWARD
CLEAR
    ;; joint positions as input in P1..17 and convert to tool-tip positions in Q1..9
    BS1_CSX = BS1_X_POS
    BS1_CSY = BS1_Y_POS

    if (MODE = TSAXS)
        BS2_CSX = BS2_X_POS
        BS3_CSX = BS3_X_POS
        BS2_X_ABS = BS2_X_POS + SP_X_POS
        BS2_CSY = BS2_Y_POS
        BS3_CSY = BS3_Y_POS
        BS2_Y_ABS = BS2_Y_POS + SP_Y_POS
    else
        ;Y calculation
        B_PITCH = atan(BS1_Y_POS / (CAMERA - ZGAP - BS1_Z))
        BS2_PITCH = atan(BS2_Y_POS / (CAMERA - ZGAP - BS2_Z))
        BS3_PITCH = atan(BS3_Y_POS / (CAMERA - ZGAP - BS3_Z))
        BS1_Y_ABS = BS1_Y_POS + SP_Y_POS
        ; X calculation        
        B_YAW = atan(BS1_X_POS / (CAMERA - ZGAP - BS1_Z))
        BS2_YAW = atan(BS2_X_POS / (CAMERA - ZGAP - BS2_Z))
        BS3_YAW = atan(BS3_X_POS / (CAMERA - ZGAP - BS3_Z))
        BS1_X_ABS = BS1_X_POS + SP_X_POS
    endif
CLOSE

; calculate real motors from compound axes
#define BS1_X_POS       Q228
#define BS2_X_POS       Q229
#define BS3_X_POS       Q230
#define SP_X_POS        Q231
#define BS1_Y_POS       Q232
#define BS2_Y_POS       Q233
#define BS3_Y_POS       Q234
#define SP_Y_POS        Q235

OPEN INVERSE
CLEAR
    ; calculate in EGUs
    ; input tool tip positions in Q1..9 and output joint coordinates in P1..17
    BS1_X_POS = BS1_CSX
    BS1_Y_POS = BS1_CSY

    if (MODE = TSAXS)
        BS2_X_POS = BS2_CSX
        BS3_X_POS = BS3_CSX
        SP_X_POS = BS2_X_ABS - BS2_CSX
        BS2_Y_POS = BS2_CSY
        BS3_Y_POS = BS3_CSY
        SP_Y_POS = BS2_Y_ABS - BS2_CSY
    else
        ; Y calculation
        B_PITCH =  atan(BS1_CSY / (CAMERA - ZGAP - BS1_Z))
        BS2_Y_POS = tan(BS2_PITCH) * (CAMERA - ZGAP - BS2_Z)
        BS3_Y_POS = tan(BS3_PITCH) * (CAMERA - ZGAP - BS3_Z)
        SP_Y_POS = BS1_Y_ABS - BS1_CSY
        ; X calculation
        B_YAW = atan(BS1_CSX / (CAMERA - ZGAP - BS1_Z))
        BS2_X_POS = tan(BS2_YAW) * (CAMERA - ZGAP - BS2_Z)
        BS3_X_POS = tan(BS3_YAW) * (CAMERA - ZGAP - BS3_Z)
        SP_X_POS = BS1_X_ABS - BS1_CSX
    endif
    ; then in cts
    P$(BS1_X) = (BS1_X_POS - BS1_X_OFF) / BS1_X_MRES
    P$(BS2_X) = (BS2_X_POS - BS2_X_OFF) / BS2_X_MRES
    P$(BS3_X) = (BS3_X_POS - BS3_X_OFF) / BS3_X_MRES
    P$(SP_X) = (SP_X_POS - SP_X_OFF) / SP_X_MRES
    P$(BS1_Y) = (BS1_Y_POS - BS1_Y_OFF) / BS1_Y_MRES
    P$(BS2_Y) = (BS2_Y_POS - BS2_Y_OFF) / BS2_Y_MRES
    P$(BS3_Y) = (BS3_Y_POS - BS3_Y_OFF) / BS3_Y_MRES
    P$(SP_Y) = (SP_Y_POS - SP_Y_OFF) / SP_Y_MRES

CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32)
#define BS1_X_POS       (BS1_X_MRES*M$(BS1_X)62/(I$(BS1_X)08*32)+BS1_X_OFF)
#define BS2_X_POS       (BS2_X_MRES*M$(BS2_X)62/(I$(BS2_X)08*32)+BS2_X_OFF)
#define BS3_X_POS       (BS3_X_MRES*M$(BS3_X)62/(I$(BS3_X)08*32)+BS3_X_OFF)
#define SP_X_POS        (SP_X_MRES *M$(SP_X)62 /(I$(SP_X)08 *32)+SP_X_OFF)
#define BS1_Y_POS       (BS1_Y_MRES*M$(BS1_Y)62/(I$(BS1_Y)08*32)+BS1_Y_OFF)
#define BS2_Y_POS       (BS2_Y_MRES*M$(BS2_Y)62/(I$(BS2_Y)08*32)+BS2_Y_OFF)
#define BS3_Y_POS       (BS3_Y_MRES*M$(BS3_Y)62/(I$(BS3_Y)08*32)+BS3_Y_OFF)
#define SP_Y_POS        (SP_Y_MRES* M$(SP_Y)62 /(I$(SP_Y)08 *32)+SP_Y_OFF)

; TSAXS
#define BS1_CSX         Q81
#define BS2_CSX         Q82
#define BS3_CSX         Q83
#define BS2_X_ABS       Q84
#define BS1_CSY         Q85
#define BS2_CSY         Q86
#define BS3_CSY         Q87
#define BS2_Y_ABS       Q88
#define BS3_CSR         Q89
; GISAXS
#define BS1_CSX         Q81
#define BS2_PITCH       Q82
#define BS3_PITCH       Q83
#define BS1_X_ABS       Q84
#define BS1_CSY         Q85
#define BS2_YAW         Q86
#define BS3_YAW         Q87
#define BS1_Y_ABS       Q88
#define BS3_CSR         Q89
; This is always set to $60000 in PLC1 so it can be used to tell an axis
; "your limits are on, stop now"
; Set ixx43 to $10FF to redirect limits to this variable
#define DummyLimitsAddress  $10FF
; gpio inputs for a geobrick : M0..15
; gpio outputs for a geobrick : M32..39
#define shutter_closed    M0
OPEN PLC$(PLC)
CLEAR
    ; joint positions as input and tool-tip positions as output, same
    ; as forward
    ADDRESS&$(COORD)
    BS1_CSX = BS1_X_POS
    BS1_CSY = BS1_Y_POS

    if (MODE = TSAXS)
        BS2_CSX = BS2_X_POS
        BS3_CSX = BS3_X_POS
        BS2_X_ABS = BS2_X_POS + SP_X_POS
        BS2_CSY = BS2_Y_POS
        BS3_CSY = BS3_Y_POS
        BS2_Y_ABS = BS2_Y_POS + SP_Y_POS
    else
        ;Y calculation
        B_PITCH = atan(BS1_Y_POS / (CAMERA - ZGAP - BS1_Z))
        BS2_PITCH = atan(BS2_Y_POS / (CAMERA - ZGAP - BS2_Z))
        BS3_PITCH = atan(BS3_Y_POS / (CAMERA - ZGAP - BS3_Z))
        BS1_Y_ABS = BS1_Y_POS + SP_Y_POS
        ; X calculation        
        B_YAW = atan(BS1_X_POS / (CAMERA - ZGAP - BS1_Z))
        BS2_YAW = atan(BS2_X_POS / (CAMERA - ZGAP - BS2_Z))
        BS3_YAW = atan(BS3_X_POS / (CAMERA - ZGAP - BS3_Z))
        BS1_X_ABS = BS1_X_POS + SP_X_POS
    endif
    ; If real motor record did the last move, set demands = readbacks
    if (BS1_X_MOVE = 1)
    or (BS2_X_MOVE = 1)
    or (BS3_X_MOVE = 1)
    or (SP_X_MOVE = 1)
    or (BS1_Y_MOVE = 1)
    or (BS2_Y_MOVE = 1)
    or (BS3_Y_MOVE = 1)
    or (SP_Y_MOVE = 1)

        BS1_X_MOVE = 0
        BS2_X_MOVE = 0
        BS3_X_MOVE = 0
        SP_X_MOVE = 0
        BS1_Y_MOVE = 0
        BS2_Y_MOVE = 0
        BS3_Y_MOVE = 0
        SP_Y_MOVE = 0

        Q71 = Q81
        Q72 = Q82
        Q73 = Q83
        Q74 = Q84
        Q75 = Q85
        Q76 = Q86
        Q77 = Q87
        Q78 = Q88
        Q79 = Q89
    endif
    ; If SAXS protective shutter is closed, allow any motion
    if (shutter_closed = 0)
        i$(BS1_X)43 = 0
        i$(BS2_X)43 = 0
        i$(SP_X)43 = 0
        i$(BS1_Y)43 = 0
        i$(BS2_Y)43 = 0
        i$(SP_Y)43 = 0
    else
        if (MODE = TSAXS)
            ; disable the direct beamstop BS2
            i$(BS2_X)43 = DummyLimitsAddress
            i$(BS2_Y)43 = DummyLimitsAddress
        else
            ; disable the direct beamstop BS1
            i$(BS1_X)43 = DummyLimitsAddress
            i$(BS1_Y)43 = DummyLimitsAddress
        endif
        ; disable SP
        i$(SP_X)43 = DummyLimitsAddress
        i$(SP_Y)43 = DummyLimitsAddress
    endif
CLOSE
ENABLE PLC$(PLC)
