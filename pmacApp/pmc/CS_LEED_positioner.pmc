CLOSE

;###################################################################
;
; Define Motion for X Prime and Z Prime with Sample Manipulator
;
; Original Author: James O'Hea
;
; Defined axes:
;        X (Addr 6) = X Prime
;        Y (Addr 7) = Z Prime
;
; Macros (and example values):
;        COORD = $(COORD)        CS number (only works for CS 1..9), e.g. 2
;        PLC = $(PLC)            PLC number, should be CS number+15, e.g. 17
;        X_REAL = $(X_REAL)      Axis Number for X, e.g. 1
;        Z_REAL = $(Z_REAL)      Axis Number for Z, e.g. 2
;	
;###################################################################

; Set trig calculations to be performed in degrees
i15 = 0

; Change to CS$(COORD)
&$(COORD)

; Set relevant axes to use kinematics
&$(COORD)#$(X_REAL)->I
&$(COORD)#$(Z_REAL)->I

; Define resolution, offset, and move flag variables
; These are set by motor_in_cs.template (from spreadsheet)
#define XMOVE P(4700+$(X_REAL))
#define XMRES P(4800+$(X_REAL))
#define XOFF  P(4900+$(X_REAL))
#define ZMOVE P(4700+$(Z_REAL))
#define ZMRES P(4800+$(Z_REAL))
#define ZOFF  P(4900+$(Z_REAL))

; Constants 

; None needed

; Q1-9 Kinematic Positions (Temporary variables used in kinematic calculations by PMAC)

#define X_PRIME        Q7        ; Desired X Prime
#define Z_PRIME        Q8        ; Desired Z Prime

; Q128-199 Forward Kinematic Temporary Variables

; None needed

; Q228-299 Inverse Kinematic Temporary Variables

; None needed

; Q20-70 EPICS Variables

; None needed

#define X_REAL          P$(X_REAL)      ; X Calculation
#define Z_REAL		P$(Z_REAL)	; Z Calculation

; Forward Kinematics - Calculate X prime and Z prime from X and Z
#define XPOS (XMRES*X_REAL+XOFF)
#define ZPOS (ZMRES*Z_REAL+ZOFF)

OPEN FORWARD
CLEAR
    X_PRIME = ((XPOS * cos(35)) - (ZPOS * sin(35)))
    Z_PRIME = ((ZPOS * cos(35)) + (XPOS * sin(35)))
CLOSE

; Inverse Kinematics - Calculate X and Z from X prime and Z prime
#define XPOS		Q232
#define ZPOS		Q233

OPEN INVERSE
CLEAR
    ; X and Z calculated in mm
    XPOS = ((Z_PRIME * sin(35)) + (X_PRIME * cos(35)))
    ZPOS = ((Z_PRIME * cos(35)) - (X_PRIME * sin(35)))

    ; X and Z calculated in motor counts
    P$(X_REAL) = ((XPOS - XOFF) / XMRES)
    P$(Z_REAL) = ((ZPOS - ZOFF) / ZMRES)
CLOSE

; A PLC for position reporting
#define X_PRIME		Q87	; Desired X Prime
#define Z_PRIME         Q88     ; Desired Z Prime
#define XPOS		(XMRES*(m$(X_REAL)62/(I$(X_REAL)08*32))+XOFF)
#define ZPOS		(ZMRES*(m$(Z_REAL)62/(I$(Z_REAL)08*32))+ZOFF)

OPEN PLC $(PLC)
CLEAR
    ADDRESS&$(COORD)
    X_PRIME = ((XPOS * cos(35)) - (ZPOS * sin(35)))
    Z_PRIME = ((ZPOS * cos(35)) + (XPOS * sin(35)))    
    ; If X Prime or Z Prime motor records did the last move, set demands = readbacks
    if (XMOVE = 1)
    or (ZMOVE = 1)
        XMOVE = 0
        ZMOVE = 0
        Q77 = Q87
        Q78 = Q88
    endif

CLOSE

ENABLE PLC $(PLC)
