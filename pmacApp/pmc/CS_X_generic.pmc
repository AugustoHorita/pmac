CLOSE

;################################################
;; \file
;; Define motion for a single axis generic coordinate system on X/Q7 (addr 6) driving a single real motor.
;; The forward and reverse transform calculations are specified as a substitution.
;; Constants and intermediate variables can also be defined to make the calculation more readable.
;;
;; Original Author: Pete Leicester
;;
;; Defined axes:
;; - X (addr 6) = demand in coordinate system motor EGU's
;;
;; Macros:
;; - COORD = 2  CS number, e.g. 2
;; - PLC = 17  PLC number, should be CS number+15, e.g. 17
;; - M1 = 1  Axisnum for real motor axis, e.g. 1
;; - XFWDCALC = Define forward calculation which converts real motor EGU (M1POS) to coordinate system EGU e.g. 47-(atan(M1POS/2849) * 57.29578) 
;; - XREVCALC = Define reverse calculation which converts coordinate system EGU (CSXPOS) to real motor EGU e.g. tan( (47-CSXPOS) /57.29578) *2849
;;      NB M1POS, CSXPOS, M1MRES, M1OFF and M1MOVE are already defined within this file. Additional constants and variables can be define as below.
;;
;; Optional Macros:
;; - Up to four constants can be defined as follows (NB n=1..4). Typically used for jack position etc...
;; - C[1..4]DESC = Defines a comment to describe constant Cn
;; - C[1..4]NAME = Defines the name of the constant that can then be used in XFWDCALC or CREVCALC or XFWDV[1..2]CALC
;; - C[1..4]VAL = Defines the value of the constant.
;;
;; - Up to two  variables can be defined as follows for use in the FORWARD transform (NB n=1..2). Typically used for intermediate calculated values...
;; - Note that XFWDV1CALC is performed before XFWDV2CALC which is performed before XFWDCALC
;; - XFWDV[1..2]DESC= Defines a comment to describe variable XFWDVn
;; - XFWDV[1..2]NAME= Defines the name of the variable that can then be used in XFWDCALC or CREVCALC or XFWDV[1..2]CALC
;; - XFWDV[1..2]CALC= Defines how to calculate the variables value
;;
;; - Up to two  variables can be defined as follows for use in the REVERSE transform (NB n=1..2). Typically used for intermediate calculated values...
;; - Note that XREVV1CALC is performed before XREVV2CALC which is performed before XREVCALC
;; - XREVV[1..2]DESC= Defines a comment to describe variable XFWDVn
;; - XREVV[1..2]NAME= Defines the name of the variable that can then be used in XFWDCALC or CREVCALC or XFWDV[1..2]CALC
;; - XREVV[1..2]CALC= Defines how to calculate the variables value
;;
;; 
;; Example1: Converting CS angle (degrees) to linear real motor (mm) using tangent and an offset
;;
;;  substitute "COORD=2"
;;  substitute "PLC=17"
;;  substitute "M1=2"
;;  substitute "XFWDCALC=47-(atan(M1POS/2849)*57.29578)"
;;  substitute "XREVCALC=tan((47-CSXPOS)/57.29578)*2849"
;;
;;
;; Example2: As above but using constants and variables
;;
;;  substitute "COORD=2"
;;  substitute "PLC=17"
;;  substitute "M1=2"
;;
;;  ;********* Constants *********
;;  substitute "C1NAME=DEGPERRAD"
;;  substitute "C1DESC=Radian conversion factor (180/pi)"
;;  substitute "C1VAL=57.29578"
;;
;;  substitute "C2NAME=ADJ"
;;  substitute "C2DESC=Length of 'adjacent' side in mm (i.e. pivot to cross beam length)"
;;  substitute "C2VAL=2849"
;;
;;  substitute "C3NAME=OFFSET"
;;  substitute "C3DESC=Angle offset in degrees"
;;  substitute "C3VAL=47"
;;
;;  ;********* Forward transform *********
;;  ;Define temporary variables and how they are calulated
;;  ;Note that XFWDV1CALC is performed before XFWDV2CALC which is performed before XFWDCALC
;;  substitute "XFWDV1NAME=ANGLE"
;;  substitute "XFWDV1DESC=Calculate angle in radians"
;;  substitute "XFWDV1CALC=atan(M1POS/ADJ)"
;;
;;  ;Define transform using the temporary variables
;;  substitute "XFWDCALC=OFFSET-(ANGLE*DEGPERRAD)"
;;
;;  ;********* Reverse transform *********
;;  ;Define temporary variables and how they are calulated
;;  ;Note that XREVV1CALC is performed before XREVV2CALC which is performed before XREVCALC
;;  substitute "XREVV1NAME=ANGLE"
;;  substitute "XREVV1DESC=Calculate angle in radians"
;;  substitute "XREVV1CALC=(OFFSET-CSXPOS)/DEGPERRAD"
;;
;;  ;Define transform using the temporary variables
;;  substitute "XREVCALC=tan(ANGLE)*ADJ"
;;
;;  include "CS_X_generic.pmc"
;;
;################################################

; Change to CS$(COORD)
&$(COORD)

; Set relevant axes to use kinematics
#$(M1)->I ; real motor axis

; These are set by motor_in_cs.template
#define M1MOVE P(4700+$(M1))
#define M1MRES P(4800+$(M1))
#define M1OFF  P(4900+$(M1))

;; Define some optional constants for use in the calculation

;; $(C1DESC=C1 Not used)
#define $(C1NAME=C1) Q20
$(C1NAME=C1) = $(C1VAL=0)

;; $(C2DESC=C2 Not used)
#define $(C2NAME=C2) Q21
$(C2NAME=C2) = $(C2VAL=0)

;; $(C3DESC=C3 Not used)
#define $(C3NAME=C3) Q22
$(C3NAME=C3) = $(C3VAL=0)

;; $(C4DESC=C4 Not used)
#define $(C4NAME=C4) Q23
$(C4NAME=C4) = $(C4VAL=0)

#define CSXPOS Q7

; Calculate coordinate system motor position
#define M1POS Q128
#define $(XFWDV1NAME=XFWDV1) Q129
#define $(XFWDV2NAME=XFWDV2) Q130
OPEN FORWARD
CLEAR
    ; calculate real motor pos in EGU's from the real motor counts
    M1POS = (M1MRES*P$(M1)+M1OFF)
    
    ; $(XFWDV1DESC=XFWDV1 Not used)
    $(XFWDV1NAME=XFWDV1) = $(XFWDV1CALC=0)

    ; $(XFWDV2DESC=XFWDV2 Not used)
    $(XFWDV2NAME=XFWDV2) = $(XFWDV2CALC=0)
    
    ; work out coordinate EGU from real motor EGU position
    CSXPOS=$(XFWDCALC)
CLOSE

; Calculate real motor position in counts
#define M1POS Q228
#define $(XREVV1NAME=XREVV1) Q229
#define $(XREVV2NAME=XREVV2) Q230
OPEN INVERSE
CLEAR
    ; $(XREVV1DESC=XREVV1 Not used)
    $(XREVV1NAME=XREVV1) = $(XREVV1CALC=0)

    ; $(XREVV2DESC=XREVV2 Not used)
    $(XREVV2NAME=XREVV2) = $(XREVV2CALC=0)

    ; work out the real motor position in EGUs from the coordinate demand EGU
    M1POS = $(XREVCALC)
    
    ; we then convert real motor EGU's to counts
    P$(M1)=(M1POS-M1OFF)/M1MRES
CLOSE


; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32)
#define M1POS Q328
#define $(XFWDV1NAME=XFWDV1) Q329
#define $(XFWDV2NAME=XFWDV2) Q330
OPEN PLC$(PLC)
CLEAR
    ADDRESS&$(COORD)
    ; calculate real motor pos in EGU's from the real motor counts
    M1POS = (M1MRES*m$(M1)62/(I$(M1)08*32)+M1OFF)

    ; $(XFWDV1DESC=XFWDV1 Not used)
    $(XFWDV1NAME=XFWDV1) = $(XFWDV1CALC=0)

    ; $(XFWDV2DESC=XFWDV2 Not used)
    $(XFWDV2NAME=XFWDV2) = $(XFWDV2CALC=0)

    ; work out coordinate EGU from real motor EGU position
    Q87=$(XFWDCALC)

    ; If real motor record did the last move, set demands = readbacks
    if (M1MOVE = 1)
        M1MOVE = 0
        Q77 = Q87
    endif
CLOSE
ENABLE PLC$(PLC)
